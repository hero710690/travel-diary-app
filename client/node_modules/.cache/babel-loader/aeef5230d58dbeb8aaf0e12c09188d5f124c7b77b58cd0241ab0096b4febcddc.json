{"ast":null,"code":"import{parseISO,isValid}from'date-fns';/**\n * Safely parse a date string and return a valid Date object\n * @param dateString - The date string to parse\n * @param fallback - Fallback date if parsing fails (defaults to current date)\n * @returns A valid Date object\n */export const safeParseDate=(dateString,fallback)=>{if(!dateString){return fallback||new Date();}try{let date;// Try parsing as ISO string first\nif(dateString.includes('T')){date=parseISO(dateString);}else{// Try parsing as YYYY-MM-DD\ndate=new Date(dateString+'T00:00:00');}// Check if date is valid\nif(isValid(date)){return date;}else{console.warn('Invalid date parsed:',dateString);return fallback||new Date();}}catch(error){console.error('Date parsing error:',error,'for date:',dateString);return fallback||new Date();}};/**\n * Calculate the difference in days between two dates\n * @param startDate - Start date\n * @param endDate - End date\n * @returns Number of days difference\n */export const getDaysDifference=(startDate,endDate)=>{const timeDiff=endDate.getTime()-startDate.getTime();return Math.floor(timeDiff/(1000*60*60*24));};/**\n * Add days to a date\n * @param date - Base date\n * @param days - Number of days to add\n * @returns New date with days added\n */export const addDaysToDate=(date,days)=>{const newDate=new Date(date);newDate.setDate(newDate.getDate()+days);return newDate;};","map":{"version":3,"names":["parseISO","isValid","safeParseDate","dateString","fallback","Date","date","includes","console","warn","error","getDaysDifference","startDate","endDate","timeDiff","getTime","Math","floor","addDaysToDate","days","newDate","setDate","getDate"],"sources":["/Users/jeanlee/travel-diary-app/client/src/utils/dateUtils.ts"],"sourcesContent":["import { parseISO, isValid } from 'date-fns';\n\n/**\n * Safely parse a date string and return a valid Date object\n * @param dateString - The date string to parse\n * @param fallback - Fallback date if parsing fails (defaults to current date)\n * @returns A valid Date object\n */\nexport const safeParseDate = (dateString: string | undefined, fallback?: Date): Date => {\n  if (!dateString) {\n    return fallback || new Date();\n  }\n\n  try {\n    let date: Date;\n    \n    // Try parsing as ISO string first\n    if (dateString.includes('T')) {\n      date = parseISO(dateString);\n    } else {\n      // Try parsing as YYYY-MM-DD\n      date = new Date(dateString + 'T00:00:00');\n    }\n    \n    // Check if date is valid\n    if (isValid(date)) {\n      return date;\n    } else {\n      console.warn('Invalid date parsed:', dateString);\n      return fallback || new Date();\n    }\n  } catch (error) {\n    console.error('Date parsing error:', error, 'for date:', dateString);\n    return fallback || new Date();\n  }\n};\n\n/**\n * Calculate the difference in days between two dates\n * @param startDate - Start date\n * @param endDate - End date\n * @returns Number of days difference\n */\nexport const getDaysDifference = (startDate: Date, endDate: Date): number => {\n  const timeDiff = endDate.getTime() - startDate.getTime();\n  return Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n};\n\n/**\n * Add days to a date\n * @param date - Base date\n * @param days - Number of days to add\n * @returns New date with days added\n */\nexport const addDaysToDate = (date: Date, days: number): Date => {\n  const newDate = new Date(date);\n  newDate.setDate(newDate.getDate() + days);\n  return newDate;\n};\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,OAAO,KAAQ,UAAU,CAE5C;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,aAAa,CAAGA,CAACC,UAA8B,CAAEC,QAAe,GAAW,CACtF,GAAI,CAACD,UAAU,CAAE,CACf,MAAO,CAAAC,QAAQ,EAAI,GAAI,CAAAC,IAAI,CAAC,CAAC,CAC/B,CAEA,GAAI,CACF,GAAI,CAAAC,IAAU,CAEd;AACA,GAAIH,UAAU,CAACI,QAAQ,CAAC,GAAG,CAAC,CAAE,CAC5BD,IAAI,CAAGN,QAAQ,CAACG,UAAU,CAAC,CAC7B,CAAC,IAAM,CACL;AACAG,IAAI,CAAG,GAAI,CAAAD,IAAI,CAACF,UAAU,CAAG,WAAW,CAAC,CAC3C,CAEA;AACA,GAAIF,OAAO,CAACK,IAAI,CAAC,CAAE,CACjB,MAAO,CAAAA,IAAI,CACb,CAAC,IAAM,CACLE,OAAO,CAACC,IAAI,CAAC,sBAAsB,CAAEN,UAAU,CAAC,CAChD,MAAO,CAAAC,QAAQ,EAAI,GAAI,CAAAC,IAAI,CAAC,CAAC,CAC/B,CACF,CAAE,MAAOK,KAAK,CAAE,CACdF,OAAO,CAACE,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAE,WAAW,CAAEP,UAAU,CAAC,CACpE,MAAO,CAAAC,QAAQ,EAAI,GAAI,CAAAC,IAAI,CAAC,CAAC,CAC/B,CACF,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAM,iBAAiB,CAAGA,CAACC,SAAe,CAAEC,OAAa,GAAa,CAC3E,KAAM,CAAAC,QAAQ,CAAGD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAGH,SAAS,CAACG,OAAO,CAAC,CAAC,CACxD,MAAO,CAAAC,IAAI,CAACC,KAAK,CAACH,QAAQ,EAAI,IAAI,CAAG,EAAE,CAAG,EAAE,CAAG,EAAE,CAAC,CAAC,CACrD,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAI,aAAa,CAAGA,CAACZ,IAAU,CAAEa,IAAY,GAAW,CAC/D,KAAM,CAAAC,OAAO,CAAG,GAAI,CAAAf,IAAI,CAACC,IAAI,CAAC,CAC9Bc,OAAO,CAACC,OAAO,CAACD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAGH,IAAI,CAAC,CACzC,MAAO,CAAAC,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}