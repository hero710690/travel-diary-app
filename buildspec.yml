version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.11
      nodejs: 18
    commands:
      - echo "Installing dependencies..."
      - pip install --upgrade pip
      - npm install -g npm@latest

  pre_build:
    commands:
      - echo "Pre-build phase started on `date`"
      - echo "Installing Python dependencies..."
      - cd python-backend
      - pip install -r requirements-lambda.txt -t ../lambda-package --no-deps
      - cd ..
      
      - echo "Installing Node.js dependencies..."
      - cd client
      - npm ci
      - cd ..

  build:
    commands:
      - echo "Build phase started on `date`"
      
      - echo "Building Lambda package..."
      - cp -r python-backend/* lambda-package/
      - cd lambda-package
      - zip -r ../backend.zip . -x "*.pyc" "__pycache__/*" "tests/*" "*.git*"
      - cd ..
      - rm -rf lambda-package
      
      - echo "Building React frontend..."
      - cd client
      - npm run build
      - cd ..
      
      - echo "Updating Lambda function..."
      - aws lambda update-function-code \
          --function-name $PROJECT_NAME-$ENVIRONMENT-backend \
          --zip-file fileb://backend.zip \
          --region $AWS_DEFAULT_REGION
      
      - echo "Getting S3 bucket name..."
      - cd infrastructure-lambda
      - S3_BUCKET=$(terraform output -raw frontend_bucket_name 2>/dev/null || echo "")
      - cd ..
      
      - echo "Uploading frontend to S3..."
      - if [ -n "$S3_BUCKET" ]; then
          aws s3 sync client/build/ s3://$S3_BUCKET --delete --region $AWS_DEFAULT_REGION;
        fi
      
      - echo "Invalidating CloudFront cache..."
      - cd infrastructure-lambda
      - DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo "")
      - cd ..
      - if [ -n "$DISTRIBUTION_ID" ]; then
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*";
        fi

  post_build:
    commands:
      - echo "Post-build phase completed on `date`"
      - cd infrastructure-lambda
      - APPLICATION_URL=$(terraform output -raw application_url 2>/dev/null || echo "")
      - echo "🚀 Deployment completed!"
      - echo "🌐 Application URL: $APPLICATION_URL"

artifacts:
  files:
    - backend.zip
    - client/build/**/*
