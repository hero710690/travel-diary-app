name: Import Existing DynamoDB Tables

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      confirm_import:
        description: 'Type "IMPORT" to confirm'
        required: true
        default: ''

env:
  AWS_REGION: ap-northeast-1
  PROJECT_NAME: travel-diary
  ENVIRONMENT: prod

jobs:
  import-tables:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_import == 'IMPORT'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false
    
    - name: Build Lambda package (required for init)
      run: |
        mkdir -p infrastructure-lambda/lambda-package
        cd python-backend
        pip install -r requirements-lambda.txt -t ../infrastructure-lambda/lambda-package --no-deps
        cp -r . ../infrastructure-lambda/lambda-package/
        cd ../infrastructure-lambda/lambda-package
        zip -r ../backend.zip . -x "tests/*" "*.git*"
        cd ..
        rm -rf lambda-package
    
    - name: Terraform Init
      working-directory: infrastructure-lambda
      run: terraform init
    
    - name: Verify Tables Exist
      run: |
        echo "🔍 Checking if DynamoDB tables exist..."
        
        # Check users table
        aws dynamodb describe-table --table-name travel-diary-prod-users-serverless --region ${{ env.AWS_REGION }} && echo "✅ Users table exists" || echo "❌ Users table not found"
        
        # Check trips table
        aws dynamodb describe-table --table-name travel-diary-prod-trips-serverless --region ${{ env.AWS_REGION }} && echo "✅ Trips table exists" || echo "❌ Trips table not found"
        
        # Check sessions table
        aws dynamodb describe-table --table-name travel-diary-prod-sessions-serverless --region ${{ env.AWS_REGION }} && echo "✅ Sessions table exists" || echo "❌ Sessions table not found"
    
    - name: Import DynamoDB Tables
      working-directory: infrastructure-lambda
      run: |
        echo "📥 Importing existing DynamoDB tables into Terraform state..."
        
        # Import users table
        terraform import aws_dynamodb_table.users travel-diary-prod-users-serverless || echo "Users table import failed"
        
        # Import trips table
        terraform import aws_dynamodb_table.trips travel-diary-prod-trips-serverless || echo "Trips table import failed"
        
        # Import sessions table
        terraform import aws_dynamodb_table.sessions travel-diary-prod-sessions-serverless || echo "Sessions table import failed"
        
        echo "✅ Import process completed"
    
    - name: Verify Import Success
      working-directory: infrastructure-lambda
      run: |
        echo "🔍 Verifying import success with Terraform plan..."
        terraform plan \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}" \
          -var="google_maps_api_key=${{ secrets.GOOGLE_MAPS_API_KEY }}" || echo "Plan failed - may need manual intervention"
    
    - name: Import Summary
      run: |
        echo "## 📥 DynamoDB Import Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tables Imported:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ travel-diary-prod-users-serverless" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ travel-diary-prod-trips-serverless" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ travel-diary-prod-sessions-serverless" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Run the main deployment workflow" >> $GITHUB_STEP_SUMMARY
        echo "2. Terraform should now manage existing tables" >> $GITHUB_STEP_SUMMARY
        echo "3. No data loss - existing data preserved" >> $GITHUB_STEP_SUMMARY
