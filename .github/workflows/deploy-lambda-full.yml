name: Deploy Travel Diary Lambda (Full Infrastructure)

on:
  push:
    branches: [ main ]
    paths:
      - 'python-backend/**'
      - 'client/**'
      - 'infrastructure-lambda/**'
      - '.github/workflows/**'
  workflow_dispatch:  # Allow manual triggers

env:
  AWS_REGION: ap-northeast-1
  PROJECT_NAME: travel-diary
  ENVIRONMENT: prod
  TF_VAR_aws_region: ap-northeast-1
  TF_VAR_project_name: travel-diary
  TF_VAR_environment: prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd python-backend
        pip install -r requirements-lambda.txt
        pip install pytest pytest-asyncio
    
    - name: Run tests
      run: |
        cd python-backend
        python -m pytest tests/ -v || echo "No tests found, skipping..."

  deploy-infrastructure:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      s3_bucket: ${{ steps.terraform.outputs.s3_bucket }}
      cloudfront_id: ${{ steps.terraform.outputs.cloudfront_id }}
      application_url: ${{ steps.terraform.outputs.application_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false
    
    - name: Build Lambda package
      run: |
        cd python-backend
        pip install -r requirements-lambda.txt -t ../infrastructure-lambda/lambda-package --no-deps
        cp -r . ../infrastructure-lambda/lambda-package/
        cd ../infrastructure-lambda/lambda-package
        zip -r ../backend.zip . -x "*.pyc" "__pycache__/*" "tests/*" "*.git*"
        rm -rf ../lambda-package
    
    - name: Terraform Init
      working-directory: infrastructure-lambda
      run: terraform init
    
    - name: Terraform Plan
      working-directory: infrastructure-lambda
      env:
        TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
        TF_VAR_google_maps_api_key: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      run: |
        terraform plan \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}" \
          -var="google_maps_api_key=${{ secrets.GOOGLE_MAPS_API_KEY }}" \
          -out=tfplan
    
    - name: Terraform Apply
      working-directory: infrastructure-lambda
      env:
        TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
        TF_VAR_google_maps_api_key: ${{ secrets.GOOGLE_MAPS_API_KEY }}
      run: terraform apply tfplan
    
    - name: Get Terraform Outputs
      id: terraform
      working-directory: infrastructure-lambda
      run: |
        echo "s3_bucket=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
        echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
        echo "application_url=$(terraform output -raw application_url)" >> $GITHUB_OUTPUT

  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Build Frontend
      run: |
        cd client
        npm ci
        npm run build
    
    - name: Upload Frontend to S3
      run: |
        aws s3 sync client/build/ s3://${{ needs.deploy-infrastructure.outputs.s3_bucket }} --delete --region ${{ env.AWS_REGION }}
    
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ needs.deploy-infrastructure.outputs.cloudfront_id }} \
          --paths "/*" \
          --region ${{ env.AWS_REGION }}
    
    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üåê Application URL: ${{ needs.deploy-infrastructure.outputs.application_url }}"
        echo ""
        echo "üìä Infrastructure deployed:"
        echo "  ‚úÖ DynamoDB tables (users, trips, sessions)"
        echo "  ‚úÖ Lambda function (backend API)"
        echo "  ‚úÖ S3 bucket (frontend hosting)"
        echo "  ‚úÖ CloudFront distribution (CDN)"
        echo "  ‚úÖ API Gateway (REST API)"
