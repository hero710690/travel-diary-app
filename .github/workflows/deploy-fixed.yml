name: Deploy Travel Diary Lambda

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  PROJECT_NAME: travel-diary
  ENVIRONMENT: prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'client/package-lock.json'
    
    - name: Verify Node.js setup
      run: |
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Checking client directory..."
        ls -la client/
        echo "Checking for package-lock.json..."
        ls -la client/package-lock.json || echo "package-lock.json not found"
    
    - name: Build Lambda package
      run: |
        echo "Building Lambda package..."
        mkdir -p infrastructure-lambda/lambda-package
        cd python-backend
        pip install -r requirements-lambda.txt -t ../infrastructure-lambda/lambda-package --no-deps --platform linux_x86_64 --only-binary=:all: || pip install -r requirements-lambda.txt -t ../infrastructure-lambda/lambda-package --no-deps
        cp -r . ../infrastructure-lambda/lambda-package/
        cd ../infrastructure-lambda/lambda-package
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + || true
        zip -r ../backend.zip . -x "tests/*" "*.git*"
        cd ..
        rm -rf lambda-package
        echo "Lambda package size: $(ls -lh backend.zip)"
    
    - name: Terraform Init
      working-directory: infrastructure-lambda
      run: |
        echo "Initializing Terraform..."
        terraform init
    
    - name: Terraform Validate
      working-directory: infrastructure-lambda
      run: |
        echo "Validating Terraform configuration..."
        terraform validate
    
    - name: Terraform Plan
      working-directory: infrastructure-lambda
      run: |
        echo "Planning Terraform deployment..."
        terraform plan \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}" \
          -var="google_maps_api_key=${{ secrets.GOOGLE_MAPS_API_KEY }}" \
          -out=tfplan
    
    - name: Terraform Apply
      working-directory: infrastructure-lambda
      run: |
        echo "Applying Terraform configuration..."
        terraform apply -auto-approve tfplan
    
    - name: Install Frontend Dependencies
      working-directory: client
      run: |
        echo "Installing frontend dependencies..."
        # Create package-lock.json if it doesn't exist
        if [ ! -f package-lock.json ]; then
          echo "Creating package-lock.json..."
          npm install
        else
          echo "Using existing package-lock.json..."
          npm ci
        fi
    
    - name: Build Frontend
      working-directory: client
      run: |
        echo "Building React frontend..."
        npm run build
        echo "Build completed. Contents:"
        ls -la build/
    
    - name: Deploy Frontend
      working-directory: infrastructure-lambda
      run: |
        echo "Deploying frontend to S3..."
        S3_BUCKET=$(terraform output -raw frontend_bucket_name)
        echo "S3 Bucket: $S3_BUCKET"
        aws s3 sync ../client/build/ s3://$S3_BUCKET --delete --region ${{ env.AWS_REGION }}
    
    - name: Invalidate CloudFront
      working-directory: infrastructure-lambda
      run: |
        echo "Invalidating CloudFront cache..."
        DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
        echo "CloudFront Distribution: $DISTRIBUTION_ID"
        aws cloudfront create-invalidation \
          --distribution-id $DISTRIBUTION_ID \
          --paths "/*" \
          --region ${{ env.AWS_REGION }}
    
    - name: Get Application URL
      working-directory: infrastructure-lambda
      run: |
        APPLICATION_URL=$(terraform output -raw application_url)
        echo "🚀 Deployment completed successfully!"
        echo "🌐 Application URL: $APPLICATION_URL"
        echo "APPLICATION_URL=$APPLICATION_URL" >> $GITHUB_ENV
    
    - name: Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Lambda function deployed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Frontend built and uploaded to S3" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ CloudFront cache invalidated" >> $GITHUB_STEP_SUMMARY
        echo "- 🌐 **Application URL**: $APPLICATION_URL" >> $GITHUB_STEP_SUMMARY
