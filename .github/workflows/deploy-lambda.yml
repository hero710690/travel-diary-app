name: Deploy Travel Diary Lambda

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'python-backend/**'
      - 'client/**'
      - 'infrastructure-lambda/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-1
  PROJECT_NAME: travel-diary
  ENVIRONMENT: prod

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd python-backend
        pip install -r requirements-lambda.txt
        pip install pytest pytest-asyncio
    
    - name: Run tests
      run: |
        cd python-backend
        python -m pytest tests/ -v || echo "No tests found, skipping..."

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
    
    - name: Build Lambda package
      run: |
        cd python-backend
        pip install -r requirements-lambda.txt -t ../infrastructure-lambda/lambda-package --no-deps
        cp -r . ../infrastructure-lambda/lambda-package/
        cd ../infrastructure-lambda/lambda-package
        zip -r ../backend.zip . -x "*.pyc" "__pycache__/*" "tests/*" "*.git*"
        rm -rf ../lambda-package
    
    - name: Build Frontend
      run: |
        cd client
        npm ci
        npm run build
    
    - name: Deploy Infrastructure
      working-directory: infrastructure-lambda
      run: |
        terraform init
        terraform plan \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="project_name=${{ env.PROJECT_NAME }}" \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}" \
          -var="google_maps_api_key=${{ secrets.GOOGLE_MAPS_API_KEY }}" \
          -out=tfplan
        terraform apply tfplan
    
    - name: Update Lambda Function
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-backend \
          --zip-file fileb://infrastructure-lambda/backend.zip \
          --region ${{ env.AWS_REGION }}
    
    - name: Upload Frontend to S3
      run: |
        S3_BUCKET=$(cd infrastructure-lambda && terraform output -raw frontend_bucket_name)
        aws s3 sync client/build/ s3://$S3_BUCKET --delete --region ${{ env.AWS_REGION }}
    
    - name: Invalidate CloudFront
      run: |
        DISTRIBUTION_ID=$(cd infrastructure-lambda && terraform output -raw cloudfront_distribution_id)
        aws cloudfront create-invalidation \
          --distribution-id $DISTRIBUTION_ID \
          --paths "/*" \
          --region ${{ env.AWS_REGION }}
    
    - name: Get Application URL
      run: |
        APPLICATION_URL=$(cd infrastructure-lambda && terraform output -raw application_url)
        echo "üöÄ Application deployed successfully!"
        echo "üåê Application URL: $APPLICATION_URL"
